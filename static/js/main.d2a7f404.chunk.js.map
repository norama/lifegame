{"version":3,"sources":["components/Title.js","settings.js","constants/actions.js","components/Grid.js","components/Controller.js","components/Config.js","algorithm/Algorithm.js","components/LifeGame.js","serviceWorker.js","index.js"],"names":["Title","generation","className","Settings","rows","cols","playTimeout","Actions","START","CLEAR","STEP","PLAY","STOP","Cell","i","j","value","onChange","onClick","Grid","caption","algorithm","action","onAction","onFirst","onNext","useState","newCells","cells","setCells","setChangedCount","setPlayProcess","useEffect","step","changedCount","stopPlayProcess","playProcess","clearInterval","setInterval","handleCellChange","map","row","key","Controller","classStep","classNames","classClear","options","label","Types","ConfigPanel","min","max","type","option","inputMin","Math","inputMax","Config","config","minNew","maxNew","_","assign","clone","minKeep","maxKeep","neighbourCount","count","ni","neighbourhood","nj","forEach","di","dj","k","n","push","Algorithm","this","nextValue","CONFIG","LifeGame","setGeneration","setConfig","setAlgorithm","setAction","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2a7f404.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Title.scss';\n\nconst Title = ({ generation }) => (\n    <div className=\"Title__root\">\n        <div className=\"Title__placeholder\"/>\n        <div className=\"Title__label\">Generation:</div>\n        <div className=\"Title__value\">{generation}</div>\n    </div>\n);\n\nTitle.propTypes = {\n    generation: PropTypes.number.isRequired\n};\n\nexport default Title;","const Settings = {\n    rows: 60,\n    cols: 60,\n    playTimeout: 1000\n};\n\nexport default Settings;","const Actions = {\n    START: 0,\n    CLEAR: 1,\n    STEP: 2,\n    PLAY: 3,\n    STOP: 4\n};\n\nexport default Actions;","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Settings from '../settings';\nimport Actions from '../constants/actions';\n\nimport './Grid.scss';\n\nconst Grid = ({ caption, algorithm, action, onAction, onFirst, onNext }) => {\n\n    const [cells, setCells] = useState(algorithm.newCells());\n    const [changedCount, setChangedCount] = useState(0);\n    const [playProcess, setPlayProcess] = useState(null);\n\n    useEffect(() => {\n\n        const init = () => {\n            setCells(algorithm.newCells());\n            setChangedCount(0);\n            onFirst();\n        };\n\n        const step = () => {\n            setCells(cells => algorithm.step(cells));\n            setChangedCount(changedCount => changedCount + 1);\n            onNext();\n        };\n\n        const startPlayProcess = () => {\n            setPlayProcess(playProcess => playProcess ? playProcess :\n                setInterval(() => {\n                    if (action === Actions.PLAY) {\n                        step();\n                    }\n                }, Settings.playTimeout)\n            );\n        };\n\n        const stopPlayProcess = () => {\n            setPlayProcess(playProcess => {\n                if (playProcess) {\n                    clearInterval(playProcess);\n                }\n                return null;\n            });\n        };\n\n        switch (action) {\n            case Actions.CLEAR:\n                init();\n                onAction(Actions.START);\n                break;\n\n            case Actions.STEP:\n                step();\n                onAction(Actions.START);\n                break;\n\n            case Actions.PLAY:\n                startPlayProcess();\n                break;\n\n            case Actions.STOP:\n                stopPlayProcess();\n                break;\n\n            default:\n                break;\n        }\n        return stopPlayProcess;\n    }, [action, onAction, algorithm, onFirst, onNext]);\n\n    const handleCellChange = (i, j) => {\n        cells[i][j] = 1 - cells[i][j];\n        setChangedCount(changedCount => changedCount + 1);\n        onFirst();\n    }\n\n    return (\n        <div className=\"Grid__root\">\n            <div className=\"Grid__panel\">\n                <table>\n                    <caption className=\"Grid__caption\">{caption}</caption>\n                    <tbody>\n                        {cells.map((row, i) => (<tr key={i}>{\n                            row.map((value, j) => (\n                                <td key={'(' + i + ',' + j + ')'}>\n                                    <Cell\n                                        i={i}\n                                        j={j}\n                                        value={value}\n                                        onChange={handleCellChange}\n                                    />\n                                </td>))\n                        }</tr>))}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n\nGrid.propTypes = {\n    caption: PropTypes.node.isRequired,\n    algorithm: PropTypes.shape({\n        newCells: PropTypes.func.isRequired,\n        step: PropTypes.func.isRequired\n    }).isRequired,\n    action: PropTypes.oneOf(Object.values(Actions)).isRequired,\n    onAction: PropTypes.func.isRequired,\n    onFirst: PropTypes.func.isRequired,\n    onNext: PropTypes.func.isRequired\n};\n\nconst Cell = ({i, j, value, onChange}) => {\n\n    const handleClick = () => {\n        onChange(i, j);\n    };\n\n    return (\n        <i className={\"fas fa-square-full\" + (value ? \" alive\" : \"\")} onClick={handleClick}></i>\n    )\n};\n\nexport default Grid;","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nimport classNames from 'classnames';\n\nimport Actions from '../constants/actions';\n\nimport './Controller.scss';\n\nconst Controller = ({ action, onAction }) => {\n\n    const handleClear = () => { if (action !== Actions.PLAY) { onAction(Actions.CLEAR); } };\n    const handleStop = () => { onAction(Actions.STOP); };\n    const handlePlay = () => { onAction(Actions.PLAY); };\n    const handleStep = () => { if (action !== Actions.PLAY) { onAction(Actions.STEP); } };\n\n    const classStop = \"far fa-stop-circle enabled\";\n    const classPlay = \"far fa-play-circle enabled\";\n    const classStep = classNames(\"fas fa-shoe-prints\", action === Actions.PLAY ? \"disabled\" : \"enabled\");\n    const classClear = classNames(\"far fa-times-circle\", action === Actions.PLAY ? \"disabled\" : \"enabled\");\n\n    return (\n        <div className=\"Controller__root\">\n            <div className=\"Controller__panel\"> \n                {action === Actions.PLAY ?\n                    <i className={classStop} onClick={handleStop}></i> :\n                    <i className={classPlay} onClick={handlePlay}></i>\n                }\n                <i className={classStep} onClick={handleStep}></i>\n                <i className={classClear} onClick={handleClear}></i>\n            </div>\n        </div>\n    );\n};\n\nController.propTypes = {\n    action: PropTypes.oneOf(Object.values(Actions)).isRequired,\n    onAction: PropTypes.func.isRequired\n};\n\nexport default Controller;","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nimport _ from 'lodash';\n\nimport Select from 'react-select';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport './Config.scss';\n\nconst options = [\n    { value: 1, label: '1' },\n    { value: 2, label: '2' },\n    { value: 3, label: '3' },\n    { value: 4, label: '4' },\n    { value: 5, label: '5' },\n    { value: 6, label: '6' },\n    { value: 7, label: '7' },\n    { value: 8, label: '8' }\n];\n\nconst Types = {\n    NEW: \"new\",\n    KEEP: \"keep\"\n};\n\nconst Config = ({ config, onChange }) => {\n\n    const handleChangeNew = (minNew, maxNew) => {\n        onChange(_.assign(_.clone(config), { minNew, maxNew }));\n    }\n\n    const handleChangeKeep = (minKeep, maxKeep) => {\n        onChange(_.assign(_.clone(config), { minKeep, maxKeep }));\n    }\n\n    return (\n        <div className=\"Config__root\">\n            <ConfigPanel\n                type={Types.NEW} \n                min={config.minNew}\n                max={config.maxNew}\n                onChange={handleChangeNew}\n            />\n            <ConfigPanel\n                type={Types.KEEP} \n                min={config.minKeep}\n                max={config.maxKeep}\n                onChange={handleChangeKeep}\n            />\n        </div>\n    );\n};\n\nConfig.propTypes = {\n    config: PropTypes.shape({\n        minNew: PropTypes.number,\n        maxNew: PropTypes.number,\n        minKeep: PropTypes.number,\n        maxKeep: PropTypes.number\n    }).isRequired,\n    onChange: PropTypes.func.isRequired\n};\n\nconst ConfigPanel = ({ min, max, type, onChange }) => {\n\n    const handleChangeMin = (option) => {\n        const inputMin = option.value;\n        if (inputMin !== min) {\n            onChange(inputMin, Math.max(max, inputMin));\n        }\n    };\n\n    const handleChangeMax = (option) => {\n        const inputMax = option.value;\n        if (inputMax !== max) {\n            onChange(Math.min(min, inputMax), inputMax);\n        }\n    };\n\n    return (\n        <div className=\"Config__panel\">\n            <div className=\"Config__img\">\n                <i className={\"fas fa-square-full\" + (type === Types.NEW ? \"\" : \" alive\")}></i>\n                <i className=\"fas fa-arrow-right\"></i>\n                <i className=\"fas fa-square-full alive\"></i>\n            </div>\n            <div className=\"Config__row\">\n                <Select\n                    options={options}\n                    value={options[min-1]}\n                    onChange={handleChangeMin}\n                    className=\"select\"\n                />\n                <i className=\"fas fa-minus\"></i>\n                <Select\n                    options={options}\n                    value={options[max-1]}\n                    onChange={handleChangeMax}\n                    className=\"select\"\n                />\n            </div>\n            <div className=\"Config__label\">\n                {type === Types.NEW ? \"Birth\" : \"Survival\"}\n            </div>\n        </div>\n    );\n};\n\nexport default Config;","import Settings from '../settings';\n\nclass Algorithm {\n\n    constructor(config) {\n        this.config = config;\n    }\n\n    step(cells) {\n        let newCells = this.newCells();\n        for (let i=0; i < Settings.rows; ++i) {\n            for (let j=0; j < Settings.cols; ++j) {\n                newCells[i][j] = this.nextValue(cells[i][j], neighbourCount(cells, i, j));\n            }\n        }\n        return newCells;\n    }\n\n    nextValue(value, count) {\n        const r = value ? \n            count >= this.config.minKeep && count <= this.config.maxKeep :\n            count >= this.config.minNew && count <= this.config.maxNew;\n        return r ? 1 : 0;\n    }\n\n    newCells() {\n        let cells = [];\n        for (let i=0; i < Settings.rows; ++i) {\n            let row = [];\n            for (let j=0; j < Settings.cols; ++j) {\n                row.push(0);\n            }\n            cells.push(row);\n        }\n        return cells;\n    }\n}\n\nfunction neighbourCount(cells, i, j) {\n    let count = 0;\n    const ni = neighbourhood(i, Settings.rows - 1);\n    const nj = neighbourhood(j, Settings.cols - 1);\n    ni.forEach((di) => {\n        nj.forEach((dj) => {\n            if (di === 0 && dj === 0) {\n                // itself, not a neighbor\n            } else {\n                count += cells[i + di][j + dj];\n            }\n        });\n    });\n    return count;\n}\n\nfunction neighbourhood(k, max) {\n    let n = [];\n    if (k > 0) {\n        n.push(-1);\n    }\n    n.push(0);\n    if (k < max) {\n        n.push(1);\n    }\n    return n;\n}\n\nexport default Algorithm;","import React from 'react';\nimport { useState, useEffect } from 'react';\n\nimport Title from './Title';\nimport Grid from './Grid';\nimport Controller from './Controller';\nimport Config from './Config';\nimport Algorithm from '../algorithm/Algorithm';\n\nimport Actions from '../constants/actions';\n\nimport './LifeGame.scss';\n\nconst CONFIG =  { minNew: 2, maxNew: 3, minKeep: 2, maxKeep: 3 };\n\nconst LifeGame = () => {\n    const [generation, setGeneration] = useState(0);\n    const [config, setConfig] = useState(CONFIG);\n    const [algorithm, setAlgorithm] = useState(new Algorithm(CONFIG));\n\n    const [action, setAction] = useState(Actions.START);\n\n    useEffect(() => {\n        setAlgorithm(new Algorithm(config));\n    }, [config]);\n\n    const handleFirst = () => {\n        setGeneration(0);\n    };\n\n    const handleNext = () => {\n        setGeneration(generation => generation + 1);\n    };\n\n    return (\n        <div className='LifeGame__root'>\n            <Controller action={action} onAction={setAction} />\n            <Grid\n                caption={<Title generation={generation} />}\n                algorithm={algorithm}\n                action={action}\n                onAction={setAction}\n                onFirst={handleFirst}\n                onNext={handleNext}\n            />\n            <Config config={config} onChange={setConfig} />\n        </div>\n    );\n};\n\nexport default LifeGame;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport LifeGame from './components/LifeGame';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<LifeGame />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}