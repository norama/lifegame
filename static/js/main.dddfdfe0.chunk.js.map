{"version":3,"sources":["components/Title.js","settings.js","constants/actions.js","components/Grid.js","components/Controller.js","components/Config.js","algorithm/Algorithm.js","components/LifeGame.js","serviceWorker.js","index.js"],"names":["Title","_ref","generation","react_default","a","createElement","className","Settings","rows","cols","playTimeout","Actions","START","CLEAR","STEP","PLAY","Cell","_ref2","i","j","value","onChange","onClick","Grid","caption","algorithm","action","onAction","onFirst","onNext","_useState","useState","newCells","_useState2","Object","slicedToArray","cells","setCells","_useState3","_useState4","setChangedCount","_useState5","_useState6","playProcess","setPlayProcess","useEffect","step","changedCount","process","setInterval","STOP","clearInterval","handleCellChange","map","row","key","Grid_Cell","Controller","classStep","classNames","classClear","options","label","Types","ConfigPanel","min","max","type","react_select_esm","option","inputMin","Math","inputMax","Config","config","Config_ConfigPanel","minNew","maxNew","_","assign","clone","minKeep","maxKeep","neighbourCount","count","ni","neighbourhood","nj","forEach","di","dj","k","n","push","Algorithm","classCallCheck","this","nextValue","CONFIG","LifeGame","setGeneration","setConfig","setAlgorithm","_useState7","_useState8","setAction","src_components_Controller","src_components_Grid","src_components_Title","src_components_Config","Boolean","window","location","hostname","match","ReactDOM","render","src_components_LifeGame","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dddfdfe0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Title.scss';\r\n\r\nconst Title = ({ generation }) => (\r\n    <div className=\"Title__root\">\r\n        <div className=\"Title__placeholder\"/>\r\n        <div className=\"Title__label\">Generation:</div>\r\n        <div className=\"Title__value\">{generation}</div>\r\n    </div>\r\n);\r\n\r\nexport default Title;","const Settings = {\r\n    rows: 60,\r\n    cols: 60,\r\n    playTimeout: 1000\r\n};\r\n\r\nexport default Settings;","const Actions = {\r\n    START: 0,\r\n    CLEAR: 1,\r\n    STEP: 2,\r\n    PLAY: 3,\r\n};\r\n\r\nexport default Actions;","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport Settings from '../settings';\r\nimport Actions from '../constants/actions';\r\n\r\nimport './Grid.scss';\r\n\r\nconst Grid = ({ caption, algorithm, action, onAction, onFirst, onNext }) => {\r\n\r\n    const [cells, setCells] = useState(algorithm.newCells());\r\n    const [changedCount, setChangedCount] = useState(0);\r\n    const [playProcess, setPlayProcess] = useState(null);\r\n\r\n    useEffect(() => {\r\n\r\n        const init = () => {\r\n            setCells(algorithm.newCells());\r\n            setChangedCount(0);\r\n            onFirst();\r\n        };\r\n\r\n        const step = () => {\r\n            setCells(cells => algorithm.step(cells));\r\n            setChangedCount(changedCount => changedCount + 1);\r\n            onNext();\r\n        };\r\n\r\n        switch (action) {\r\n            case Actions.CLEAR:\r\n                init();\r\n                onAction(Actions.START);\r\n                break;\r\n\r\n            case Actions.STEP:\r\n                step();\r\n                onAction(Actions.START);\r\n                break;\r\n\r\n            case Actions.PLAY:\r\n                const process = setInterval(() => {\r\n                    if (action === Actions.PLAY) {\r\n                        step();\r\n                    }\r\n                }, Settings.playTimeout);\r\n                setPlayProcess(process);\r\n                break;\r\n\r\n            case Actions.STOP:\r\n                if (playProcess) {\r\n                    clearInterval(playProcess);\r\n                    setPlayProcess(null);\r\n                }\r\n                onAction(Actions.START);\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n    }, [action]);\r\n\r\n    const handleCellChange = (i, j) => {\r\n        cells[i][j] = 1 - cells[i][j];\r\n        setChangedCount(changedCount => changedCount + 1);\r\n        onFirst();\r\n    }\r\n\r\n    return (\r\n        <div className=\"Grid__root\">\r\n            <div className=\"Grid__panel\">\r\n                <table>\r\n                    <caption className=\"Grid__caption\">{caption}</caption>\r\n                    <tbody>\r\n                        {cells.map((row, i) => (<tr key={i}>{\r\n                            row.map((value, j) => (\r\n                                <td key={'(' + i + ',' + j + ')'}>\r\n                                    <Cell\r\n                                        i={i}\r\n                                        j={j}\r\n                                        value={value}\r\n                                        onChange={handleCellChange}\r\n                                    />\r\n                                </td>))\r\n                        }</tr>))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Cell = ({i, j, value, onChange}) => {\r\n\r\n    const handleClick = () => {\r\n        onChange(i, j);\r\n    };\r\n\r\n    return (\r\n        <i className={\"fas fa-square-full\" + (value ? \" alive\" : \"\")} onClick={handleClick}></i>\r\n    )\r\n};\r\n\r\nexport default Grid;","import React from 'react';\r\n\r\nimport classNames from 'classnames';\r\n\r\nimport Actions from '../constants/actions';\r\n\r\nimport './Controller.scss';\r\n\r\nconst Controller = ({ action, onAction }) => {\r\n\r\n    const handleClear = () => { if (action !== Actions.PLAY) { onAction(Actions.CLEAR); } };\r\n    const handleStop = () => { onAction(Actions.STOP); };\r\n    const handlePlay = () => { onAction(Actions.PLAY); };\r\n    const handleStep = () => { if (action !== Actions.PLAY) { onAction(Actions.STEP); } };\r\n\r\n    const classStop = \"far fa-stop-circle enabled\";\r\n    const classPlay = \"far fa-play-circle enabled\";\r\n    const classStep = classNames(\"fas fa-shoe-prints\", action === Actions.PLAY ? \"disabled\" : \"enabled\");\r\n    const classClear = classNames(\"far fa-times-circle\", action === Actions.PLAY ? \"disabled\" : \"enabled\");\r\n\r\n    return (\r\n        <div className=\"Controller__root\">\r\n            <div className=\"Controller__panel\"> \r\n                {action === Actions.PLAY ?\r\n                    <i className={classStop} onClick={handleStop}></i> :\r\n                    <i className={classPlay} onClick={handlePlay}></i>\r\n                }\r\n                <i className={classStep} onClick={handleStep}></i>\r\n                <i className={classClear} onClick={handleClear}></i>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Controller;","import React from 'react';\r\n\r\nimport _ from 'lodash';\r\n\r\nimport Select from 'react-select';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport './Config.scss';\r\n\r\nconst options = [\r\n    { value: 1, label: '1' },\r\n    { value: 2, label: '2' },\r\n    { value: 3, label: '3' },\r\n    { value: 4, label: '4' },\r\n    { value: 5, label: '5' },\r\n    { value: 6, label: '6' },\r\n    { value: 7, label: '7' },\r\n    { value: 8, label: '8' }\r\n];\r\n\r\nconst Types = {\r\n    NEW: \"new\",\r\n    KEEP: \"keep\"\r\n};\r\n\r\nconst Config = ({ config, onChange }) => {\r\n\r\n    const handleChangeNew = (minNew, maxNew) => {\r\n        onChange(_.assign(_.clone(config), { minNew, maxNew }));\r\n    }\r\n\r\n    const handleChangeKeep = (minKeep, maxKeep) => {\r\n        onChange(_.assign(_.clone(config), { minKeep, maxKeep }));\r\n    }\r\n\r\n    return (\r\n        <div className=\"Config__root\">\r\n            <ConfigPanel\r\n                type={Types.NEW} \r\n                min={config.minNew}\r\n                max={config.maxNew}\r\n                onChange={handleChangeNew}\r\n            />\r\n            <ConfigPanel\r\n                type={Types.KEEP} \r\n                min={config.minKeep}\r\n                max={config.maxKeep}\r\n                onChange={handleChangeKeep}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ConfigPanel = ({ min, max, type, onChange }) => {\r\n\r\n    const handleChangeMin = (option) => {\r\n        const inputMin = option.value;\r\n        if (inputMin !== min) {\r\n            onChange(inputMin, Math.max(max, inputMin));\r\n        }\r\n    };\r\n\r\n    const handleChangeMax = (option) => {\r\n        const inputMax = option.value;\r\n        if (inputMax !== max) {\r\n            onChange(Math.min(min, inputMax), inputMax);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"Config__panel\">\r\n            <div className=\"Config__img\">\r\n                <i className={\"fas fa-square-full\" + (type === Types.NEW ? \"\" : \" alive\")}></i>\r\n                <i className=\"fas fa-arrow-right\"></i>\r\n                <i className=\"fas fa-square-full alive\"></i>\r\n            </div>\r\n            <div className=\"Config__row\">\r\n                <Select\r\n                    options={options}\r\n                    value={options[min-1]}\r\n                    onChange={handleChangeMin}\r\n                    className=\"select\"\r\n                />\r\n                <i className=\"fas fa-minus\"></i>\r\n                <Select\r\n                    options={options}\r\n                    value={options[max-1]}\r\n                    onChange={handleChangeMax}\r\n                    className=\"select\"\r\n                />\r\n            </div>\r\n            <div className=\"Config__label\">\r\n                {type === Types.NEW ? \"Birth\" : \"Survival\"}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Config;","import Settings from '../settings';\r\n\r\nclass Algorithm {\r\n\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n\r\n    step(cells) {\r\n        let newCells = this.newCells();\r\n        for (let i=0; i < Settings.rows; ++i) {\r\n            for (let j=0; j < Settings.cols; ++j) {\r\n                newCells[i][j] = this.nextValue(cells[i][j], neighbourCount(cells, i, j));\r\n            }\r\n        }\r\n        return newCells;\r\n    }\r\n\r\n    nextValue(value, count) {\r\n        const r = value ? \r\n            count >= this.config.minKeep && count <= this.config.maxKeep :\r\n            count >= this.config.minNew && count <= this.config.maxNew;\r\n        return r ? 1 : 0;\r\n    }\r\n\r\n    newCells() {\r\n        let cells = [];\r\n        for (let i=0; i < Settings.rows; ++i) {\r\n            let row = [];\r\n            for (let j=0; j < Settings.cols; ++j) {\r\n                row.push(0);\r\n            }\r\n            cells.push(row);\r\n        }\r\n        return cells;\r\n    }\r\n}\r\n\r\nfunction neighbourCount(cells, i, j) {\r\n    let count = 0;\r\n    const ni = neighbourhood(i, Settings.rows - 1);\r\n    const nj = neighbourhood(j, Settings.cols - 1);\r\n    ni.forEach((di) => {\r\n        nj.forEach((dj) => {\r\n            if (di === 0 && dj === 0) {\r\n                // itself, not a neighbor\r\n            } else {\r\n                count += cells[i + di][j + dj];\r\n            }\r\n        });\r\n    });\r\n    return count;\r\n}\r\n\r\nfunction neighbourhood(k, max) {\r\n    let n = [];\r\n    if (k > 0) {\r\n        n.push(-1);\r\n    }\r\n    n.push(0);\r\n    if (k < max) {\r\n        n.push(1);\r\n    }\r\n    return n;\r\n}\r\n\r\nexport default Algorithm;","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport Title from './Title';\r\nimport Grid from './Grid';\r\nimport Controller from './Controller';\r\nimport Config from './Config';\r\nimport Algorithm from '../algorithm/Algorithm';\r\n\r\nimport Actions from '../constants/actions';\r\n\r\nimport './LifeGame.scss';\r\n\r\nconst CONFIG = { minNew: 2, maxNew: 3, minKeep: 2, maxKeep: 3 };\r\n\r\nconst LifeGame = () => {\r\n    const [generation, setGeneration] = useState(0);\r\n    const [config, setConfig] = useState(CONFIG);\r\n    const [algorithm, setAlgorithm] = useState(new Algorithm(CONFIG));\r\n\r\n    const [action, setAction] = useState(Actions.START);\r\n\r\n    useEffect(() => {\r\n        setAlgorithm(new Algorithm(config));\r\n    }, [config]);\r\n\r\n    const handleFirst = () => {\r\n        setGeneration(0);\r\n    };\r\n\r\n    const handleNext = () => {\r\n        setGeneration(generation => generation + 1);\r\n    };\r\n\r\n    return (\r\n        <div className='LifeGame__root'>\r\n            <Controller action={action} onAction={setAction} />\r\n            <Grid\r\n                caption={<Title generation={generation} />}\r\n                algorithm={algorithm}\r\n                action={action}\r\n                onAction={setAction}\r\n                onFirst={handleFirst}\r\n                onNext={handleNext}\r\n            />\r\n            <Config config={config} onChange={setConfig} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LifeGame;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport LifeGame from './components/LifeGame';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<LifeGame />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}